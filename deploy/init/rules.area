mapping
Phud\Items
key, furniture, container, equipment, weapon, food, drink, item~

mapping
Phud\Affects
glow, poison, affect~

mapping
Phud\Actors
shopkeeper, questmaster, trainer, acolyte, actor~

mapping
Phud\Actors
mob~

mapping
Phud\Room
area~

mapping
Phud\Room
door~

mapping
Phud\Room
room~

mapping
Phud\Room\Dungeon
dungeon, random_dungeon Random, grid_dungeon Grid~

mapping
Phud\Quests
quest~

def
glow, poison, affect~
<?php
return function($parser, $affect) {
	$parser->getLastAdded()->addAffect(new $affect($parser->loadRequired([], ['properties'])));
};
?>~

def
area~
<?php
return function($parser, $class) {
	$parser->setArea(new $class($parser->loadRequired([], ['properties'])));
};
?>~

def
door~
<?php
return function($parser, $door) {
	$parser->setLastAdded(new $door($parser->loadRequired(['short', 'long'], ['properties'])));
};
?>~

def
room~
<?php
return function($parser, $room) {
	$room = new $room($parser->loadRequired(
		['short', 'long' => 'block'], 
		['properties' => function(&$p, $property, $value) {
			$v = Phud\Room\Direction::getFullAlias($property);
			if($v) {
				unset($p[$property]);
				$p[$v] = $value;
				return true;
			}
	}]));
	$parser->setLastRoom($room);
};
?>~

def
dungeon, random_dungeon, grid_dungeon~
<?php
return function($parser, $room) use ($server) {
	$room = new $room($parser->loadRequired(
		['short', 'long' => 'block'], 
		['properties' => function(&$p, $property, $value) {
			$v = Phud\Room\Direction::getFullAlias($property);
			if($v) {
				unset($p[$property]);
				$p[$v] = $value;
				return true;
			}
	}]));
	$parser->setLastRoom($room);
	$server->on('deployed', function() use ($room) {
		$room->setup();
	});
};
?>~

def
quest~
<?php
return function($parser, $quest) {
	while($id = $parser->readLine()) {
		$quest = $quest::getByID($id);
		if($quest) {
			$parser->getLastAdded()->addQuest($quest);
		} else {
			Phud\Debug::log('Quest not found: '.$id);
		}
	}
};
?>~

def
key, furniture, container, equipment, weapon, food, drink, item~
<?php
return function($parser, $class) {
	$item = new $class($parser->loadRequired(['short', 'long' => 'block'], ['properties', 'attributes']));
	$parser->setLastAdded($item);
	$parser->getLastFirstClass()->addItem($item);
};
?>~

def
mob~
<?php
return function($parser, $mob) use ($server) {
	$p = $parser->loadRequired(['short', 'long' => 'block'], ['properties', 'attributes', 'abilities']);

	// count is for adding more than one copy of the actor to a room. Useful
	// for populating dungeons.
	if(isset($p['count'])) {
		$count = $p['count'];
		unset($p['count']);
	} else {
		$count = 1;
	}
	for($i = 0; $i < $count; $i++) {
		$mob = new $mob($p);
		$room = $parser->getLastRoom();
		$parser->setLastFirstClass($mob);
		Phud\Debug::log("Adding ".$mob." to ".$room->getShort());
		if($room instanceof Phud\Room\Dungeon\Dungeon) {
			$server->on('deployed', function() use ($room, $mob) {
				$room = Phud\Room\Dungeon\Dungeon::getRandom($room->getShort());
				$mob->setRoom($room);
			},
			'end');
		} else {
			$mob->setRoom($room);
		}
		$server->on('tick', function($event) use ($mob) {
			$mob->tick($event);
		});
	}
};
?>~

def
shopkeeper, questmaster, trainer, acolyte, actor~
<?php
return function($parser, $actor) {
	$a = new $actor($parser->loadRequired(['short', 'long' => 'block'], ['properties']));
	$a->setRoom($parser->getLastRoom());
	$parser->setLastFirstClass($a);
	Phud\Debug::log("Adding ".$a." to ".$parser->getLastRoom());
};
?>~
