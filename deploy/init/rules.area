alias
key furniture container equipment food drink item

alias
glow poison affect

alias
dungeon room

def
area Phud
<?php
return function($parser, $class) {
	$parser->setArea(new $class($parser->loadRequired([], ['properties'])));
};
?>~

def
affect Phud\Affects
<?php
return function($parser, $affect) {
	$parser->getLastAdded()->addAffect(new $affect($parser->loadRequired([], ['properties'])));
};
?>~

def
door Phud
<?php
return function($parser, $door) {
	$parser->setLastAdded(new $door($parser->loadRequired(['short', 'long'], ['properties'])));
};
?>~

def
quest Phud\Quests
<?php
return function($parser, $quest) {
	while($id = $parser->readLine()) {
		$quest = $quest::getByID($id);
		if($quest) {
			$parser->getLastAdded()->addQuest($quest);
		} else {
			Phud\Debug::log('Quest not found: '.$id);
		}
	}
};
?>~

def
room Phud
<?php
return function($parser, $room) {
	$room = new $room($parser->loadRequired(
		['short', 'long' => 'block'], 
		['properties' => function(&$p, $property, $value) {
			foreach(Phud\Direction::getDirections() as $l) {
				if(strpos($l, $property) === 0) {
					$p[$l] = $value;
					return true;
				}
			}
	}]));
	$parser->setLastRoom($room);
	if($room instanceof Phud\Dungeon) {
		return function() use ($room) {
			$room->setup();
		};
	}
};
?>~

def
item Phud\Items
<?php
return function($parser, $class) {
	$item = new $class($parser->loadRequired(['short', 'long' => 'block'], ['properties', 'attributes']));
	$parser->setLastAdded($item);
	$parser->getLastFirstClass()->addItem($item);
};
?>~

def
mob Phud\Actors
<?php
return function($parser, $mob) {
	$p = $parser->loadRequired(['short', 'long' => 'block'], ['properties', 'attributes', 'abilities']);

	// count is for adding more than one copy of the actor to a room. Useful
	// for populating dungeons.
	if(isset($p['count'])) {
		$count = $p['count'];
		unset($p['count']);
	} else {
		$count = 1;
	}
	$end_hooks = [];
	for($i = 0; $i < $count; $i++) {
		$mob = new $mob($p);
		$room = $parser->getLastRoom();
		$parser->setLastFirstClass($mob);
		Phud\Debug::log("Adding ".$mob." to ".$room->getShort());
		if($room instanceof Phud\Dungeon) {
			$end_hooks[] = function() use ($room, $mob) {
				$room = Phud\Dungeon::getRandom($room->getShort());
				$mob->setRoom($room);
			};
		} else {
			$mob->setRoom($room);
		}
	}
	return $end_hooks;
};
?>~

def
shopkeeper Phud\Actors
<?php
return function($parser, $shopkeeper) {
	$keeper = new $shopkeeper($parser->loadRequired(['short', 'long' => 'block'], ['properties']));
	$keeper->addAbility(Phud\Abilities\Ability::lookup('haggle'));
	$keeper->setRoom($parser->getLastRoom());
	$parser->setLastFirstClass($keeper);
	Phud\Debug::log("Adding ".$keeper." to ".$parser->getLastRoom());
};
?>~

def
questmaster Phud\Actors
<?php
return function($parser, $questmaster) {
	$master = new $questmaster($parser->loadRequired(['short', 'long' => 'block'], ['properties']));
	$master->setRoom($parser->getLastRoom());
	$parser->setLastFirstClass($master);
	Phud\Debug::log("Adding ".$master." to ".$parser->getLastRoom());
};
?>~
